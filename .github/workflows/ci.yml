name: Board Yet CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.set-tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Set Image Tag
        id: set-tag
        run: echo "tag=board-yet:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          docker compose build
          docker tag app board-yet:${{ github.sha }}
          docker save board-yet:${{ github.sha }} | gzip > image.tar.gz

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-image
          path: image.tar.gz

  phpstan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download & Load Image
        run: |
          gh release download -p image.tar.gz || true
          gunzip -c image.tar.gz | docker load

      - name: Run PHPStan
        run: docker run --rm board-yet:${{ github.sha }} phpstan analyse app

  phpcs:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download & Load Image
        run: |
          gh release download -p image.tar.gz || true
          gunzip -c image.tar.gz | docker load

      - name: Run PHPCS
        run: docker run --rm board-yet:${{ github.sha }} phpcs --standard=/var/www/phpcs.xml app

  phpmd:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download & Load Image
        run: |
          gh release download -p image.tar.gz || true
          gunzip -c image.tar.gz | docker load

      - name: Run PHPMD
        run: docker run --rm board-yet:${{ github.sha }} phpmd app text phpmd.xml

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download & Load Image
        run: |
          gh release download -p image.tar.gz || true
          gunzip -c image.tar.gz | docker load

      - name: Copy .env.testing
        run: cp .env.testing .env

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('composer.lock') }}
          restore-keys: |
            composer-

      - name: Start Services
        run: docker compose up -d database app

      - name: Install Composer Dependencies
        run: docker compose exec -T app composer install --no-interaction --prefer-dist --no-progress

      - name: Generate App Key
        run: docker compose exec -T app php artisan key:generate

      - name: Run Migrations
        run: docker compose exec -T app php artisan migrate --force

      - name: Run Tests
        run: docker compose exec -T app php artisan test

      - name: Shutdown
        if: always()
        run: docker compose down